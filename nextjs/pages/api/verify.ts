import { ZKEdDSAEventTicketPCDPackage } from '@pcd/zk-eddsa-event-ticket-pcd'
import { NextApiRequest, NextApiResponse } from 'next'
import { hexToBigInt } from 'viem'
import { isAddress } from 'viem'
import { isETHBerlinPublicKey } from '../../lib/pcd'

export default async function handler (
  req: NextApiRequest,
  res: NextApiResponse
) {
  const pcd = await ZKEdDSAEventTicketPCDPackage.deserialize(req.body.pcd)
  const address = req.body.address

  // ## Validations
  if (!isAddress(address)) {
    return res.status(401).send('Invalid address')
  }

  if (!(await ZKEdDSAEventTicketPCDPackage.verify(pcd))) {
    console.error(`[ERROR] ZK ticket PCD is not valid`)

    return res.status(401).send('ZK ticket PCD is not valid')
  }

  if (!isETHBerlinPublicKey(pcd.claim.signer)) {
    console.error(`[ERROR] PCD is not signed by Zupass`)

    return res.status(401).send('PCD is not signed by ETHBerlin')
  }

  // TODO: Use real nonce generated by the server
  if (
    pcd.claim.watermark.toString() !==
    hexToBigInt(address as `0x${string}`).toString()
  ) {
    console.error(`[ERROR] PCD watermark doesn't match`)

    res.status(401).send("PCD watermark doesn't match")
    return
  }

  // TODO: Check that the event id is the one we expect

  return res.status(200).json({
    message: `ðŸŽ‰ PCD verified! 1 ETH has been sent to ${address}!`
  })
}
